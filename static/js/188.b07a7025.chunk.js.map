{"version":3,"file":"static/js/188.b07a7025.chunk.js","mappings":"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","sources":["types.ts","hooks.tsx","Row.tsx","SideBoard.tsx","Overlay.tsx","TetrisGame.tsx","utils.ts","App.tsx","reportWebVitals.ts","bootstrap.tsx"],"sourcesContent":["export type Color =\n  | \"bg-white\"\n  | \"bg-slate-400\"\n  | \"bg-slate-200\"\n  | \"bg-blue-400\"\n  | \"bg-red-400\"\n  | \"bg-orange-400\"\n  | \"bg-yellow-400\"\n  | \"bg-green-400\"\n  | \"bg-pink-400\"\n  | \"bg-purple-400\";\n\nexport interface Shape {\n  row: number;\n  width: number;\n  height: number;\n  orientation: Orientation;\n  color: Color;\n  sprite: number[][];\n}\n\nexport enum BoardType {\n  Stage,\n  Next,\n  Swap,\n}\n\nexport type Board = Spot[][];\n\nexport type BoardMap = {\n  [key in BoardType]: {\n    board: Board;\n    set: React.Dispatch<React.SetStateAction<Board>>;\n    bgColor: Color;\n  };\n};\n\nexport interface ShapeMap {\n  [key: string]: Partial<Shape>;\n}\n\nexport interface Spot {\n  row: number;\n  col: Column;\n  value: string;\n  color: Color;\n  fixed: boolean;\n}\n\nexport interface SpriteSpot {\n  row: number;\n  col: number;\n}\n\nexport type Sprite = SpriteSpot[];\n\nexport interface Piece {\n  name: string;\n  color: Color;\n  sprite: Sprite;\n  row: number;\n  column: number;\n  height: number;\n  width: number;\n}\n\nexport interface PieceSprite {\n  [key: string]: Piece;\n}\n\nexport enum Column {\n  a,\n  b,\n  c,\n  d,\n  e,\n  f,\n  g,\n  h,\n  i,\n  j,\n}\n\nexport enum Orientation {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nexport enum GameMode {\n  \"Over\",\n  \"Play\",\n  \"Pause\",\n}\n","import React, { useState, useEffect, useRef } from \"react\";\n// Hook\nexport const useKeyPress = (targetKey: string) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = (key: KeyboardEvent) => {\n    if (key.key === targetKey) {\n      setKeyPressed(true);\n    }\n  };\n  // If released key is our target key then set to false\n  const upHandler = (key: KeyboardEvent): void => {\n    if (key.key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n};\n\n// https://usehooks.com/useDebounce/\nexport const useDebounce = (value: number | boolean, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};\n\nexport function useThrottle<T>(value: T, interval = 500): T {\n  const [throttledValue, setThrottledValue] = useState<T>(value);\n  const lastExecuted = useRef<number>(Date.now());\n\n  useEffect(() => {\n    if (Date.now() >= lastExecuted.current + interval) {\n      lastExecuted.current = Date.now();\n      setThrottledValue(value);\n    } else {\n      const timerId = setTimeout(() => {\n        lastExecuted.current = Date.now();\n        setThrottledValue(value);\n      }, interval);\n\n      return () => clearTimeout(timerId);\n    }\n  }, [value, interval]);\n\n  return throttledValue;\n}\n","import React from \"react\";\nimport { Spot } from \"./types\";\n\ninterface RowProps {\n  spots: Spot[];\n  width: string;\n  height: string;\n  hide?: boolean;\n}\nconst Row = ({ spots, width, height, hide }: RowProps) => {\n  return (\n    <>\n      {spots.length > 0 &&\n        spots?.map((spot, index) => {\n          return (\n            <div key={`spot-${index}`} className={hide ? \"hidden\" : \"\"}>\n              <div\n                className={[\n                  `ease-linear ${spot.fixed ? \"duration-200\" : \"duration-75\"}`,\n                  spot.color,\n                  width,\n                  height,\n                  spot.fixed\n                    ? \"rounded-xs border\"\n                    : spot.color === \"bg-slate-400\"\n                    ? \"border border-slate-500\" //affects grid\n                    : \"border\", // piece/cursor\n                ].join(\" \")}\n              >\n                {/* {spot.value} */}\n              </div>\n            </div>\n          );\n        })}\n    </>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport Row from \"./Row\";\nimport { Board } from \"./types\";\n\ninterface Props {\n  board: Board;\n  columns: number;\n  gameMode: number;\n  title: string;\n  width?: string;\n}\n\nconst SideBoard = ({ gameMode, columns, board, title, width }: Props) => {\n  return (\n    <fieldset\n      className={`${\n        gameMode ? \"opacity-100\" : \"opacity-25\"\n      } p-4 text-sm align-middle border-2 rounded-md h-fit border-slate-700 text-slate-500 dark:text-slate-400`}\n    >\n      <legend className=\"mx-auto text-base font-medium tracking-tight text-slate-900 dark:text-white\">\n        {title}\n      </legend>\n\n      <div\n        className={`grid gap-0 grow-0 grid-cols-${columns} ${width} place-content-center`}\n      >\n        {board.map((row, nextIndex) => {\n          return (\n            <Row\n              key={`next-${nextIndex}`}\n              spots={row}\n              width=\"w-4\"\n              height=\"h-4\"\n            />\n          );\n        })}\n      </div>\n    </fieldset>\n  );\n};\n\nexport default SideBoard;\n","import React, { ReactElement } from \"react\";\nimport { GameMode } from \"./types\";\n\ninterface Props {\n  gameMode: GameMode;\n  heading: string;\n  children: ReactElement[];\n  // buttons: ReactElement[];\n}\n\nconst Overlay = ({ gameMode, heading, children }: Props) => {\n  return (\n    <div className={`absolute inset-x-0 z-10 w-72 mx-auto capitalize top-48`}>\n      <h1\n        className={`text-5xl ${\n          gameMode === GameMode.Over ? \"text-red-500\" : \"text-blue-500\"\n        } font-extrabold opacity-100`}\n      >\n        {heading}\n      </h1>\n      <div className=\"\">{children}</div>\n    </div>\n  );\n};\n\nexport default Overlay;\n","import React, { useEffect, useState } from \"react\";\nimport { useKeyPress } from \"./hooks\";\nimport {\n  BoardMap,\n  BoardType,\n  Color,\n  PieceSprite,\n  Spot,\n  Piece,\n  Board,\n  GameMode as Game,\n} from \"./types\";\nimport * as sprites from \"./sprites.json\";\nimport SideBoard from \"./SideBoard\";\nimport Overlay from \"./Overlay\";\nimport Row from \"./Row\";\nimport { rotate } from \"./utils\";\n\nconst TetrisGame = () => {\n  const boardWidth = 12;\n  const boardHeight = 21;\n  const pieceOptions = \"ijlostz\";\n  const velocityStart = 700;\n  const empty: Spot = {\n    color: \"bg-slate-400\",\n    fixed: false,\n    row: 0,\n    col: 0,\n    value: \"0\",\n  };\n  const emptyRow: Spot[] = new Array(boardWidth).fill({\n    color: \"bg-slate-400\",\n    fixed: false,\n  });\n  const emptyBoard: Board = [];\n  // init an empty board\n  for (let y = 0; y < boardHeight; y++) {\n    const tempRow: Spot[] = [];\n    for (let x = 0; x < boardWidth; x++) {\n      tempRow.push({\n        ...empty,\n        color: \"bg-slate-400\",\n        col: x,\n        row: y,\n        value: `r${y} c${x}`,\n      });\n    }\n    emptyBoard.push(tempRow);\n  }\n\n  const emptyNextQueue: Board = [];\n  // init an empty board\n  for (let y = 0; y < 4 * pieceOptions.length; y++) {\n    const tempRow: Spot[] = [];\n    for (let x = 0; x < 5; x++) {\n      tempRow.push({\n        ...empty,\n        color: \"bg-slate-200\",\n        col: x,\n        row: y,\n        value: `r${y} c${x}`,\n      });\n    }\n    emptyNextQueue.push(tempRow);\n  }\n\n  const emptysmallBoard: Board = [];\n  for (let y = 0; y < 4; y++) {\n    const tempRow: Spot[] = [];\n    for (let x = 0; x < 5; x++) {\n      tempRow.push({\n        fixed: true,\n        color: \"bg-slate-200\",\n        col: x,\n        row: y,\n        value: `r${y} c${x}`,\n      });\n    }\n    emptysmallBoard.push(tempRow);\n  }\n\n  const pieceSprites: PieceSprite = sprites as PieceSprite;\n\n  const [nextPieceQueue, setNextPieceQueue] = useState<Piece[]>([\n    pieceSprites.t,\n    pieceSprites.j,\n    pieceSprites.z,\n    pieceSprites.o,\n    pieceSprites.i,\n    pieceSprites.l,\n    pieceSprites.z,\n  ]);\n\n  const nextQ = Array.from(emptyNextQueue);\n  let piecePosition = 0;\n  nextPieceQueue.forEach((tempPiece) => {\n    tempPiece.sprite.forEach((spriteSpot) => {\n      nextQ[spriteSpot.row + piecePosition * 4].splice(spriteSpot.col, 1, {\n        col: spriteSpot.col,\n        row: spriteSpot.row,\n        color: tempPiece.color,\n        fixed: true,\n        value: `r${spriteSpot.row} c${spriteSpot.col}`,\n      });\n    });\n    piecePosition++;\n  });\n\n  // boards\n  const [stageBoard, setStageBoard] = useState<Board>(emptyBoard);\n  const [nextBoard, setNextBoard] = useState<Board>(nextQ);\n  const [swappedBoard, setSwappedBoard] = useState<Board>(emptysmallBoard);\n\n  // pieces\n  const [piece, setPiece] = useState<Piece>(pieceSprites.j);\n  const [nextPiece, setNextPiece] = useState<Piece>(pieceSprites.t);\n  const [swappedPiece, setSwappedPiece] = useState<Piece>();\n\n  // physics\n  const [velocity, setVelocity] = useState(velocityStart);\n  const [levelVelocity, setLevelVelocity] = useState(velocityStart);\n  const [tick, setTick] = useState(0);\n  const [hTick, setHTick] = useState(0);\n  const [dropPiece, setDropPiece] = useState(false);\n  const [fastGravity, setFastGravity] = useState(false);\n\n  // admin\n  const [gameMode, setGameMode] = useState<Game>(Game.Play);\n  const [overlayText, setOverlayText] = useState(\"paused\");\n  const [rowsClearedCount, setRowsClearedCount] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  // keypresses\n  const keyLeftPressed = useKeyPress(\"ArrowLeft\");\n  const keyRightPressed = useKeyPress(\"ArrowRight\");\n  const keyUpPressed = useKeyPress(\"ArrowUp\");\n  const keyDownPressed = useKeyPress(\"ArrowDown\");\n  const keyEnterPressed = useKeyPress(\"Enter\");\n  const keyWPressed = useKeyPress(\"w\");\n  const keyAPressed = useKeyPress(\"a\");\n  const keySPressed = useKeyPress(\"s\");\n  const keyDPressed = useKeyPress(\"d\");\n  const keyShiftPressed = useKeyPress(\"Shift\");\n  const keyEscapePressed = useKeyPress(\"Escape\");\n  const keySpacePressed = useKeyPress(\" \");\n\n  // controls\n  const controlsEnabled = gameMode === Game.Play;\n  const rotateCW = controlsEnabled && keySpacePressed;\n  const rotateCounterCW = controlsEnabled && rotateCW && keyShiftPressed;\n  const leftPressed = controlsEnabled && (keyLeftPressed || keyAPressed);\n  const rightPressed = controlsEnabled && (keyRightPressed || keyDPressed);\n  let swappPressed = controlsEnabled && keyEnterPressed;\n\n  const buttonClasses = `block text-xl font-medium px-4 py-2 mt-4 capitalize text-sky-500 border-sky-600 hover:bg-sky-200 active:bg-sky-300 hover:text-sky-600 transition ease-in duration-400 border-2 rounded-md ${\n    !gameMode ? \"cursor-default\" : \"\"\n  }`;\n\n  const boards: BoardMap = {\n    [BoardType.Stage]: {\n      board: stageBoard,\n      set: setStageBoard,\n      bgColor: \"bg-slate-400\",\n    },\n    [BoardType.Next]: {\n      board: nextBoard,\n      set: setNextBoard,\n      bgColor: \"bg-slate-200\",\n    },\n    [BoardType.Swap]: {\n      board: swappedBoard,\n      set: setSwappedBoard,\n      bgColor: \"bg-slate-200\",\n    },\n  };\n\n  const resetGame = () => {\n    setStageBoard(emptyBoard);\n    setSwappedBoard(emptysmallBoard);\n    setTick(0);\n    setVelocity(velocityStart);\n    setLevelVelocity(velocityStart);\n    setRowsClearedCount(0);\n    setGameMode(Game.Play);\n  };\n\n  const colorTheSpots = (theSprite: Piece, color: Color, fixed: boolean) => {\n    const tempBoard = [...stageBoard];\n    theSprite.sprite.forEach((spriteSpot) => {\n      const isFixed = tempBoard[spriteSpot.row][spriteSpot.col]?.fixed;\n      !isFixed &&\n        tempBoard[spriteSpot.row].splice(spriteSpot.col, 1, {\n          row: spriteSpot.row,\n          col: spriteSpot.col,\n          color: color,\n          fixed,\n          value: `r${spriteSpot.row} c${spriteSpot.col}`,\n        });\n    });\n\n    setStageBoard(clearLines(tempBoard));\n  };\n\n  const colorPieceOnBoard = (thePiece: Piece, boardType: BoardType) => {\n    const tempBoard = [...boards[boardType].board].map((row) =>\n      row.map((spot) => {\n        return {\n          ...spot,\n          color: spot.fixed ? spot.color : boards[boardType].bgColor,\n        };\n      })\n    );\n\n    thePiece.sprite.forEach((spriteSpot) => {\n      tempBoard[spriteSpot.row].splice(spriteSpot.col, 1, {\n        row: 0,\n        col: spriteSpot.col,\n        color: thePiece.color,\n        fixed: false,\n        value: `r${spriteSpot.row} c${spriteSpot.col}`,\n      });\n    });\n    boards[boardType].set(tempBoard);\n  };\n\n  const setPieceOnStage = (newSprite: Piece, fixed?: boolean) => {\n    setPiece((oldSprite) => {\n      colorTheSpots(oldSprite, \"bg-slate-400\", false);\n      colorTheSpots(\n        newSprite,\n        fixed ? (newSprite.color.replace(\"4\", \"6\") as Color) : newSprite.color,\n        !!fixed\n      );\n      return newSprite;\n    });\n  };\n\n  const clearLines = (tempBoard: Board) => {\n    const cleared =\n      tempBoard.filter((row) =>\n        row.filter((spot) => spot.fixed).length === boardWidth ? false : true\n      ) ?? [];\n    if (cleared.length < tempBoard.length) {\n      const clearedLength = cleared.length;\n      let count = 0;\n      for (let i = 0; i <= tempBoard.length - 1 - clearedLength; i++) {\n        cleared.unshift([...emptyRow]);\n        count++;\n        console.info(\"line cleared\");\n      }\n\n      setRowsClearedCount(rowsClearedCount + count);\n      setLevelVelocity(levelVelocity - 10 * count);\n    }\n    return cleared;\n  };\n\n  // init\n  useEffect(() => {\n    resetGame();\n    const savedScore = localStorage.getItem(\"highScore\");\n    savedScore && setHighScore(Number(savedScore));\n  }, []);\n\n  useEffect(() => {\n    if (gameMode === Game.Play && keyEscapePressed) {\n      setGameMode(Game.Pause);\n      setOverlayText(\"paused\");\n    }\n  }, [keyEscapePressed]);\n\n  useEffect(() => {\n    gameMode === Game.Play && setFastGravity(keyDownPressed || keySPressed);\n  }, [keyDownPressed, keySPressed]);\n\n  useEffect(() => {\n    gameMode === Game.Play &&\n      (keyUpPressed || keyWPressed) &&\n      setDropPiece(true);\n  }, [keyUpPressed, keyWPressed]);\n\n  useEffect(() => {\n    gameMode === Game.Play &&\n      tick > 0 &&\n      setVelocity(dropPiece ? velocity / 10000 : levelVelocity);\n  }, [dropPiece]);\n\n  useEffect(() => {\n    gameMode === Game.Play &&\n      tick > 0 &&\n      setVelocity(fastGravity ? velocity / 10 : levelVelocity);\n  }, [fastGravity]);\n\n  useEffect(() => {\n    if (tick > 0) {\n      setOverlayText(\"game over\");\n      setGameMode(Game.Over);\n      if (rowsClearedCount > highScore) {\n        localStorage.setItem(\"highScore\", rowsClearedCount.toString());\n        setHighScore(rowsClearedCount);\n      }\n      console.info(\"GAME OVER\");\n    }\n  }, [stageBoard[0].some((spot) => spot.fixed)]); // when any spot in top row is fixed\n\n  // swap\n  useEffect(() => {\n    if (swappPressed) {\n      swappPressed = false;\n      console.info(\"SWAP\");\n      let newPiece = swappedPiece;\n      if (!newPiece) {\n        newPiece = nextPiece;\n        const piece = pieceOptions.charAt(Math.floor(Math.random() * 6));\n        nextPieceQueue.shift();\n        nextPieceQueue.push(pieceSprites[piece]);\n        setNextPieceQueue(nextPieceQueue);\n        colorPieceOnBoard(pieceSprites[piece], BoardType.Next);\n        setNextPiece(pieceSprites[piece]);\n      }\n\n      newPiece.column = pieceSprites[newPiece.name].column;\n      newPiece.row = pieceSprites[newPiece.name].row;\n      newPiece.sprite = pieceSprites[newPiece.name].sprite;\n\n      // clear board of previous piece\n      colorPieceOnBoard({ ...piece, color: \"bg-slate-400\" }, BoardType.Stage);\n\n      colorPieceOnBoard(pieceSprites[piece.name], BoardType.Swap);\n      setSwappedPiece(piece);\n      setPiece(newPiece);\n    }\n  }, [swappPressed]);\n\n  // move piece down G R A V I T Y\n  useEffect(() => {\n    let pieceFixed = false;\n    if (piece.row + piece.height <= boardHeight - 1) {\n      let allowed = true;\n      piece?.sprite?.forEach((spot) => {\n        const isFixed = stageBoard[spot.row + 1][spot.col]?.fixed;\n        if (isFixed) {\n          allowed = !isFixed;\n        }\n      });\n\n      if (allowed) {\n        setPieceOnStage({\n          ...piece,\n          row: piece.row + 1,\n          sprite: piece.sprite.map((spot) => {\n            return {\n              ...spot,\n              row: spot.row + 1,\n            };\n          }),\n        });\n      } else {\n        pieceFixed = true;\n        setPieceOnStage(piece, pieceFixed);\n      }\n    } else {\n      pieceFixed = true;\n      setPieceOnStage(piece, pieceFixed);\n    }\n\n    if (pieceFixed) {\n      setDropPiece(false);\n      setFastGravity(false);\n      // get next sprite\n      let next = pieceSprites[\"j\"];\n      // switch (Math.floor(Math.random() * 6)) {\n      switch (nextPiece.name) {\n        case \"i\":\n          next = pieceSprites[\"j\"];\n          break;\n        case \"j\":\n          next = pieceSprites[\"l\"];\n          break;\n        case \"l\":\n          next = pieceSprites[\"o\"];\n          break;\n        case \"o\":\n          next = pieceSprites[\"s\"];\n          break;\n        case \"s\":\n          next = pieceSprites[\"t\"];\n          break;\n        case \"t\":\n          next = pieceSprites[\"z\"];\n          break;\n        case \"z\":\n        default:\n          next = pieceSprites[\"i\"];\n          break;\n      }\n\n      const tempQ = [...nextPieceQueue];\n      const newPiece = tempQ.shift() ?? next;\n      setPieceOnStage(newPiece);\n      setNextPiece(tempQ[0]);\n      tempQ.push(next);\n      setNextPieceQueue(tempQ);\n\n      const tempNextBoard = [...nextBoard];\n      for (let i = 0; i < 4; i++) {\n        tempNextBoard.shift();\n      }\n\n      const mysmallboard = Array.from(emptysmallBoard);\n      next.sprite.forEach((spriteSpot) => {\n        mysmallboard[spriteSpot.row].splice(spriteSpot.col, 1, {\n          color: next.color,\n          col: spriteSpot.col,\n          row: spriteSpot.row,\n          fixed: false,\n          value: \"idc\",\n        });\n      });\n      tempNextBoard.push(...mysmallboard);\n      setNextBoard(tempNextBoard);\n    }\n\n    const timeout = setTimeout(() => {\n      gameMode === Game.Play && setTick(tick + 1);\n    }, velocity);\n\n    return () => clearInterval(timeout);\n  }, [tick, velocity, swappedPiece, gameMode]);\n\n  // move left or right\n  useEffect(() => {\n    const magnitude = leftPressed ? piece.column : piece.column + piece.width;\n    const direction =\n      leftPressed && magnitude > 0\n        ? -1\n        : rightPressed && magnitude < boardWidth\n        ? 1\n        : 0;\n\n    let allowed = true;\n    piece.sprite.forEach((spot) => {\n      const isSpotFixed = stageBoard[spot.row][spot.col + direction]?.fixed;\n      if (isSpotFixed) {\n        allowed = !isSpotFixed;\n      }\n    });\n\n    if (allowed) {\n      setPieceOnStage({\n        ...piece,\n        column: piece.column + direction,\n        sprite: piece.sprite.map((spot) => {\n          return {\n            ...spot,\n            col: spot.col + direction,\n          };\n        }),\n      });\n    }\n  }, [leftPressed, rightPressed, hTick]);\n\n  // rotation\n  useEffect(() => {\n    // debounce protection\n    if (!rotateCW && !rotateCounterCW) {\n      return;\n    }\n    const [converted, cornerPosition] = rotate(piece, rotateCW ? \"cw\" : \"ccw\");\n\n    setPieceOnStage({\n      ...piece,\n      sprite: converted,\n      height: piece.width,\n      width: piece.height,\n      row: cornerPosition.row,\n      column: cornerPosition.col,\n    });\n  }, [rotateCW, rotateCounterCW]);\n\n  return (\n    <div className=\"flex w-full h-screen dark:bg-slate-900\">\n      <div className={`relative flex p-4 m-2 `}>\n        <SideBoard\n          board={nextBoard}\n          gameMode={gameMode}\n          columns={nextBoard[0].length}\n          title=\"Next\"\n        />\n\n        <div\n          className={`transition-opacity duration-1000 ease-out justify-items-start ${\n            gameMode === Game.Play ? \"opacity-0 cursor-default\" : \"opacity-100\"\n          }`}\n        >\n          <Overlay gameMode={gameMode} heading={overlayText}>\n            {gameMode === Game.Pause ? (\n              <button\n                key={`button-resume`}\n                className={`mr-4 ${buttonClasses}`}\n                onClick={() => {\n                  setTimeout(() => setOverlayText(\"paused\"), 1100);\n                  setGameMode(Game.Play);\n                }}\n              >\n                resume\n              </button>\n            ) : (\n              <></>\n            )}\n            <button\n              key={`button-reset`}\n              className={`${buttonClasses.replaceAll(\n                \"sky\",\n                gameMode === Game.Over ? \"fuchsia\" : \"emerald\"\n              )}`}\n              onClick={() => (gameMode !== Game.Play ? resetGame() : {})}\n            >\n              new game\n            </button>\n          </Overlay>\n        </div>\n\n        <div\n          className={[\n            `place-content-center content-start`,\n            `px-4 w-96 mx-auto grid gap-0 grid-cols-${boardWidth.toString()}`,\n            `${gameMode === Game.Play ? \"opacity-100\" : \"opacity-25\"}`,\n            `transition duration-1000 z-0`,\n          ]\n            .join(\" \")\n            .trim()}\n        >\n          {stageBoard.map((row, index) => {\n            return (\n              <Row\n                key={index}\n                spots={row}\n                width=\"w-8\"\n                height=\"h-8\"\n                hide={index === 0}\n              />\n            );\n          })}\n        </div>\n\n        <div className=\"text-green-400\">\n          <div className=\"w-16\">\n            <SideBoard\n              board={swappedBoard}\n              width=\"w-20\"\n              columns={swappedBoard[0].length}\n              gameMode={gameMode}\n              title=\"Swap\"\n            />\n          </div>\n\n          <h3 className=\"mt-4 text-xl text-indigo-400\">High Score</h3>\n          <p className=\"text-indigo-400\">{highScore} rows</p>\n\n          <div className=\"flex mt-4\">\n            <h3 className=\"\">Rows Cleared:</h3>\n            <p>{`\\u00a0 ${rowsClearedCount}`}</p>\n          </div>\n\n          <div className=\"flex mt-4\">\n            <h3 className=\"\">Fall Delay:</h3>\n            <p>{`\\u00a0 ${velocity} ms`}</p>\n          </div>\n\n          <div className=\"flex mt-4\">\n            <h3 className=\"\">Ticks:</h3>\n            <p>{`\\u00a0 ${tick}`}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TetrisGame;\n","import { Piece, Sprite, SpriteSpot } from \"./types\";\n\nexport const rotate = (\n  piece: Piece,\n  direction: \"cw\" | \"ccw\"\n): [Sprite, SpriteSpot] => {\n  let count = 1;\n  const max = Math.max(piece.height, piece.width) + 1;\n\n  const tempMatrix: number[][] = [];\n  for (let y = 0; y < max; y++) {\n    tempMatrix.push([]);\n    for (let x = 0; x < max; x++) {\n      tempMatrix[y].push(0);\n    }\n  }\n  piece.sprite.forEach((s) => {\n    tempMatrix[s.row - piece.row + 1][s.col - piece.column + 1] = count++;\n  });\n\n  let rotated: number[][] = [...tempMatrix];\n  for (let i = 0; i < (direction === \"ccw\" ? 3 : 1); i++) {\n    rotated = rotated[0].map((val, index) =>\n      rotated.map((row) => row[index]).reverse()\n    );\n  }\n\n  const converted: Sprite = [];\n  rotated.forEach((row, y) => {\n    row.forEach((spot, x) => {\n      const index = spot > 0 ? spot - 1 : -1;\n      index >= 0 &&\n        converted?.splice(index, 0, {\n          row: y + piece.row - 1,\n          col: x + piece.column - 1,\n        });\n    });\n  });\n  const cornerPosition = converted.reduce(\n    (lowest, current) => {\n      const col = lowest.col < current.col ? lowest.col : current.col;\n      const row = lowest.row < current.row ? lowest.row : current.row;\n      return { col, row };\n    },\n    { col: converted[0].col, row: converted[0].row }\n  );\n\n  return [converted, cornerPosition];\n};\n","import React from \"react\";\nimport TetrisGame from \"./TetrisGame\";\n\nfunction App() {\n  return (\n    <div>\n      <TetrisGame />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"tetrisroot\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"names":["BoardType","Column","Orientation","GameMode","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","spots","width","height","hide","length","map","spot","index","className","fixed","color","join","gameMode","columns","board","title","row","nextIndex","heading","children","Over","pieceOptions","velocityStart","empty","col","value","emptyRow","Array","fill","emptyBoard","y","tempRow","x","push","emptyNextQueue","emptysmallBoard","pieceSprites","sprites","t","j","z","o","i","l","nextPieceQueue","setNextPieceQueue","nextQ","from","piecePosition","forEach","tempPiece","sprite","spriteSpot","splice","stageBoard","setStageBoard","nextBoard","setNextBoard","swappedBoard","setSwappedBoard","piece","setPiece","nextPiece","setNextPiece","swappedPiece","setSwappedPiece","velocity","setVelocity","levelVelocity","setLevelVelocity","tick","setTick","hTick","dropPiece","setDropPiece","fastGravity","setFastGravity","Game","setGameMode","overlayText","setOverlayText","rowsClearedCount","setRowsClearedCount","highScore","setHighScore","keyLeftPressed","keyRightPressed","keyUpPressed","keyDownPressed","keyEnterPressed","keyWPressed","keyAPressed","keySPressed","keyDPressed","keyShiftPressed","keyEscapePressed","keySpacePressed","controlsEnabled","rotateCW","rotateCounterCW","leftPressed","rightPressed","swappPressed","buttonClasses","boards","Stage","set","bgColor","Next","Swap","resetGame","colorTheSpots","theSprite","tempBoard","clearLines","colorPieceOnBoard","thePiece","boardType","setPieceOnStage","newSprite","oldSprite","replace","cleared","filter","clearedLength","count","unshift","console","info","savedScore","localStorage","getItem","Number","setItem","toString","some","newPiece","charAt","Math","floor","random","shift","column","name","pieceFixed","boardHeight","allowed","isFixed","next","tempQ","tempNextBoard","mysmallboard","timeout","setTimeout","clearInterval","magnitude","direction","isSpotFixed","max","tempMatrix","s","rotated","val","reverse","converted","cornerPosition","reduce","lowest","current","rotate","onClick","replaceAll","trim","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","reportWebVitals"],"sourceRoot":""}